import __init__

import pandas as pd
import os
import json
from utils.helper_functions import get_files, load_mapping_file # Assuming helper_functions is in utils
from db.queries.post.post_bench29 import add_cases_bench_diagnosis
from db.utils.db_utils import get_session

# --- Constants ---
# Directories for test case files
DIR_TREATMENT = "../../data/tests/treatment"
DIR_FINAL_TESTS = "../../data/tests/final"
# Path to the mapping file generated by load_cases.py
MAPPING_FILE_PATH = "../../data/output/mapping_file.jsonl" # Adjust path as needed

# Exclusion lists for specific files
EXCLUDED_TREATMENT_FILES = []
EXCLUDED_FINAL_TEST_FILES = []

# Flags to exclude entire directories
EXCLUDE_ALL_TREATMENT = False
EXCLUDE_ALL_FINAL_TESTS = True # Defaulting to True as in load_cases.py

VERBOSE = True
# --- Helper Functions ---



# --- Core Logic ---

def load_golden_diagnosis_file(session,
full_path,
mapping_data,
golden_diagnosis_column = "diagnostico",
alternative_diagnosis_column = "icd10_diagnostic_name",
 verbose=False):
    """
    Loads golden diagnoses from a single test CSV file into the database.

    Args:
        session: The database session object.
        full_path: The absolute path to the CSV file.
        mapping_data: Dictionary mapping (test_name, original_row_index) to cases_bench_id.
        verbose: Boolean flag for verbose output.
    """
    if not os.path.exists(full_path):
        print(f"Error: Test file not found at {full_path}")
        return

    df = pd.read_csv(full_path)
    if df.empty:
        print(f"Warning: Test file is empty at {full_path}")
        return

    file_name = os.path.basename(full_path)
    test_name = file_name.replace(".csv", "")
    print(f"Processing golden diagnoses for test: {test_name}")

    # Define required columns for golden diagnosis
    required_columns = ['id', golden_diagnosis_column, alternative_diagnosis_column] 
    if not all(col in df.columns for col in required_columns):
        print(f"Error: Missing required columns in {full_path}. Needed: {required_columns}")
        return

    for index, row in df.iterrows():
        row_id = row.get('id')
        if row_id is None:
            print(f"  Error processing row {index} in {file_name}: Missing expected column 'id'")
            continue

        row_id = int(row_id)
        mapping_key = (test_name, row_id)

        if mapping_key not in mapping_data:
            if verbose:
                print(f"  Warning: No mapping found for {test_name}, row id {row_id}. Skipping golden diagnosis.")
            continue

        cases_bench_id = mapping_data[mapping_key]

        # Prepare data for add_cases_bench_diagnosis
        # Map CSV columns to function arguments
        gold_diagnosis_val = row.get(golden_diagnosis_column)
        alternative_diagnosis_val = row.get(alternative_diagnosis_column)

        if pd.isna(gold_diagnosis_val):
            if verbose:
                print(f"  Warning: Skipping row id {row_id} in {test_name} due to missing {golden_diagnosis_column}.")
            continue

        # Add the golden diagnosis record
        diagnosis_id = add_cases_bench_diagnosis(
            session=session,
            case_id=cases_bench_id,
            gold_diagnosis=gold_diagnosis_val,
            alternative_diagnosis=alternative_diagnosis_val if pd.notna(alternative_diagnosis_val) else None,
            further=None, # No 'further' column identified in CSV
            verbose=verbose
        )

        if diagnosis_id is None and verbose:
            # Error occurred (error printed in add_cases_bench_diagnosis)
            pass
        elif diagnosis_id and verbose:
            # Check if it returned an existing ID or a new one
            # Note: The function returns existing ID if skipping, or new ID if added.
            # Consider adjusting verbose message if needed to differentiate.
            print(f"  Processed golden diagnosis for cases_bench_id {cases_bench_id} (CSV row id: {row_id}). Result ID: {diagnosis_id}")

def load_all_golden_diagnoses(session, all_test_files, mapping_data, dir_final_tests, dir_treatment=None, verbose=False):
    """
    Loads golden diagnoses from multiple specified test files into the database.

    Args:
        session: The database session object.
        all_test_files: A list of filenames (relative to their directories) to process.
        mapping_data: Dictionary mapping (test_name, index) tuples to cases_bench_id.
        dir_final_tests: The directory path for 'final' test files.
        dir_treatment: The directory path for 'treatment' test files. Optional.
        verbose: Boolean flag for verbose output.
    """
    treatment_filenames = [os.path.basename(f) for f in get_files("test_*", dir_treatment, verbose=False)] if dir_treatment else []

    for file in all_test_files:
        print(f"Processing file for golden diagnoses: {file}")
        is_treatment_file = file in treatment_filenames and dir_treatment is not None
        dir_input = dir_treatment if is_treatment_file else dir_final_tests

        if not os.path.isdir(dir_input):
            print(f"Warning: Directory not found: {dir_input}. Skipping file {file}.")
            continue

        full_path = os.path.join(dir_input, file)

        if not os.path.isfile(full_path):
            print(f"Warning: File not found: {full_path}. Skipping.")
            continue

        load_golden_diagnosis_file(session, full_path, mapping_data, verbose=verbose)


def main(
        dir_treatment=DIR_TREATMENT,
        dir_final_tests=DIR_FINAL_TESTS,
        mapping_file_path=MAPPING_FILE_PATH,
        excluded_treatment=None,
        excluded_final=None,
        exclude_all_treatment=EXCLUDE_ALL_TREATMENT,
        exclude_all_final=EXCLUDE_ALL_FINAL_TESTS,
        verbose=VERBOSE
    ):
    """
    Main function to orchestrate loading golden diagnoses from CSV files into the database.
    """
    excluded_treatment_files = excluded_treatment if excluded_treatment is not None else []
    excluded_final_test_files = excluded_final if excluded_final is not None else []

    session = get_session()
    if not session:
        print("Error: Failed to get database session. Exiting.")
        return

    mapping_data = load_mapping_file(mapping_file_path)
    if mapping_data is None:
        print("Error: Failed to load mapping file. Exiting.")
        return
    if not mapping_data:
        print("Warning: Mapping file loaded but is empty.")

    test_pattern = "test_*.csv"
    treatment_files = []
    if dir_treatment and not exclude_all_treatment:
        treatment_files = get_files(test_pattern, dir_treatment, verbose=verbose)
        treatment_files = [f for f in treatment_files if f not in excluded_treatment_files]

    final_test_files = []
    if dir_final_tests and not exclude_all_final:
        final_test_files = get_files(test_pattern, dir_final_tests, verbose=verbose)
        final_test_files = [f for f in final_test_files if f not in excluded_final_test_files]

    all_test_files = treatment_files + final_test_files

    if not all_test_files:
        print("No test files found or selected for processing golden diagnoses.")
        return

    print(f"Found {len(all_test_files)} test files to process for golden diagnoses.")
    load_all_golden_diagnoses(session, all_test_files, mapping_data, dir_final_tests, dir_treatment, verbose)

    print("Golden diagnosis loading process finished.")
    session.close()


if __name__ == "__main__":
    main(
        dir_treatment=DIR_TREATMENT,
        dir_final_tests=DIR_FINAL_TESTS,
        mapping_file_path=MAPPING_FILE_PATH,
        excluded_treatment=EXCLUDED_TREATMENT_FILES,
        excluded_final=EXCLUDED_FINAL_TEST_FILES,
        exclude_all_treatment=EXCLUDE_ALL_TREATMENT,
        exclude_all_final=EXCLUDE_ALL_FINAL_TESTS,
        verbose=VERBOSE
    )