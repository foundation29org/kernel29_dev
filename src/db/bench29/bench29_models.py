"""
Bench29 models module that defines models for clinical case database
and LLM diagnosis evaluations.
"""

import os
import sys

# Adjust the system path to include the parent directory
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../../'))

from sqlalchemy import Column, Integer, String, Text, DateTime, JSON, ForeignKeyConstraint
from datetime import datetime
from db.db_conf import Base

from db.registry.registry_models import SeverityLevels, ComplexityLevels, DiagnosisSemanticRelationship
from db.llm.llm_models import Models  # Models class from llm schema
from db.prompts.prompts_models import Prompt  # Prompt class from prompts schema

    ## TODO: add sqlalchemy relationship() for foreign keys
    ## TODO: add bench table as registry.bench, add casebench_to_bench table as bench29.casebench_to_bench
    ## TODO: add llmanalysis as a view
    ## TODO: add llmanalysis_computed as a view of a view that do mathematical operations on llmanalysis    
    

class CasesBench(Base):
    """
    Cases Bench table that stores clinical cases to be analyzed,
    including original text and metadata.
    """
    __tablename__ = 'cases_bench'
    __table_args__ = {'schema': 'bench29'}
    ##TODO: add bench table as registry.bench, add casebench_to_bench table as bench29.casebench_to_bench
    id = Column(Integer, primary_key=True)
    hospital = Column(String(255))
    original_text = Column(Text)
    meta_data = Column(JSON)
    processed_date = Column(DateTime)
    source_type = Column(String(255))
    source_file_path = Column(Text)


class CasesBenchMetadata(Base):
    """
    Cases Bench Metadata table that stores additional metadata about clinical cases
    including disease type, medical specialties, and complexity.
    """
    __tablename__ = 'cases_bench_metadata'
    __table_args__ = (
        ForeignKeyConstraint(['cases_bench_id'], ['bench29.cases_bench.id'], ondelete='CASCADE'),
        ForeignKeyConstraint(['severity_levels_id'], ['registry.severity_levels.id'], ondelete='SET NULL'),
        ForeignKeyConstraint(['predicted_by'], ['llm.models.id'], ondelete='SET NULL'),
        ForeignKeyConstraint(['complexity_level_id'], ['registry.complexity_levels.id'], ondelete='SET NULL'),
        {'schema': 'bench29'},
    )

    id = Column(Integer, primary_key=True)
    cases_bench_id = Column(Integer, nullable=False)
    predicted_by = Column(Integer)  # Foreign key to llm.models.id
    disease_type = Column(String(255))
    primary_medical_specialty = Column(String(255))
    sub_medical_specialty = Column(String(255))
    alternative_medical_specialty = Column(String(255))
    comments = Column(Text)
    severity_levels_id = Column(Integer)  # References registry.severity_levels.id
    complexity_level_id = Column(Integer)  # References registry.complexity_levels.id


class CasesBenchGoldDiagnosis(Base):
    """
    Cases Bench Gold Diagnosis table that stores the correct diagnoses for clinical cases,
    which are used to evaluate LLM performance.
    """
    __tablename__ = 'cases_bench_gold_diagnosis'
    __table_args__ = (
        ForeignKeyConstraint(['cases_bench_id'], ['bench29.cases_bench.id'], ondelete='CASCADE'),
        {'schema': 'bench29'},
    )

    id = Column(Integer, primary_key=True)
    cases_bench_id = Column(Integer, nullable=False)
    diagnosis_type_tag = Column(String(255))
    alternative = Column(String)
    further = Column(String)


class CasesBenchDiagnosis(Base):
    """
    Cases Bench Diagnosis table that stores the correct diagnoses for clinical cases,
    which are used to evaluate LLM performance.
    """
    __tablename__ = 'cases_bench_diagnosis'
    __table_args__ = (
        ForeignKeyConstraint(['cases_bench_id'], ['bench29.cases_bench.id'], ondelete='CASCADE'),
        {'schema': 'bench29'},
    )

    id = Column(Integer, primary_key=True)
    cases_bench_id = Column(Integer, nullable=False)
    gold_diagnosis = Column(String(255))
    alternative = Column(String)
    further = Column(String)


class LlmDifferentialDiagnosis(Base):
    """
    LLM Differential Diagnosis table that stores diagnoses generated by LLMs for clinical cases.
    """
    __tablename__ = 'llm_differential_diagnosis'
    __table_args__ = (
        ForeignKeyConstraint(['cases_bench_id'], ['bench29.cases_bench.id'], ondelete='CASCADE'),
        ForeignKeyConstraint(['model_id'], ['llm.models.id'], ondelete='CASCADE'),
        ForeignKeyConstraint(['prompt_id'], ['prompts.prompt.id'], ondelete='CASCADE'),
        {'schema': 'bench29'},
    )

    id = Column(Integer, primary_key=True)
    cases_bench_id = Column(Integer, nullable=False)
    model_id = Column(Integer, nullable=False)
    prompt_id = Column(Integer, nullable=False)
    diagnosis = Column(Text)
    timestamp = Column(DateTime, default=datetime.utcnow)


class DifferentialDiagnosis2Rank(Base):
    """
    LLM Differential Diagnosis Rank table that stores ranked list of diagnoses
    provided by an LLM for a clinical case.
    """
    __tablename__ = 'differential_diagnosis_to_rank'
    __table_args__ = (
        ForeignKeyConstraint(['cases_bench_id'], ['bench29.cases_bench.id'], ondelete='CASCADE'),
        ForeignKeyConstraint(['differential_diagnosis_id'], ['bench29.llm_differential_diagnosis.id'], ondelete='CASCADE'),
        {'schema': 'bench29'},
    )

    id = Column(Integer, primary_key=True)
    cases_bench_id = Column(Integer, nullable=False)
    differential_diagnosis_id = Column(Integer, nullable=False)
    rank_position = Column(Integer)
    predicted_diagnosis = Column(String(255))
    reasoning = Column(Text)


class DifferentialDiagnosis2Severity(Base):
    """
    LLM Differential Diagnosis By Severity table that stores severity ratings for diagnoses
    made by LLMs.
    """
    __tablename__ = 'differential_diagnosis_to_severity'
    __table_args__ = (
        ForeignKeyConstraint(['cases_bench_id'], ['bench29.cases_bench.id'], ondelete='CASCADE'),
        ForeignKeyConstraint(['rank_id'], ['bench29.differential_diagnosis_to_rank.id'], ondelete='CASCADE'),
        ForeignKeyConstraint(['severity_levels_id'], ['registry.severity_levels.id'], ondelete='CASCADE'),
        {'schema': 'bench29'},
    )

    id = Column(Integer, primary_key=True)
    cases_bench_id = Column(Integer, nullable=False)
    rank_id = Column(Integer, nullable=False) #revise if its ranks_id or differential_diagnosis_id
    severity_levels_id = Column(Integer, nullable=False)


class DifferentialDiagnosis2SemanticRelationship(Base):
    """
    LLM Differential Diagnosis By Semantic Relationship table that stores semantic relationship
    classifications for diagnoses made by LLMs.
    """
    __tablename__ = 'differential_diagnosis_to_semantic_relationship'
    __table_args__ = (
        ForeignKeyConstraint(['cases_bench_id'], ['bench29.cases_bench.id'], ondelete='CASCADE'),
        ForeignKeyConstraint(['rank_id'], ['bench29.differential_diagnosis_to_rank.id'], ondelete='CASCADE'),
        ForeignKeyConstraint(
            ['differential_diagnosis_semantic_relationship_id'], 
            ['registry.diagnosis_semantic_relationship.id'], 
            ondelete='CASCADE'
        ),
        {'schema': 'bench29'},
    )

    id = Column(Integer, primary_key=True)
    cases_bench_id = Column(Integer, nullable=False)
    rank_id = Column(Integer, nullable=False)
    differential_diagnosis_semantic_relationship_id = Column(Integer, nullable=False)


class LlmAnalysis(Base):
    """
    LLM Analysis table that aggregates data from multiple tables to provide
    a comprehensive view of LLM diagnosis performance.
    """
    __tablename__ = 'llm_analysis'
    __table_args__ = (
        ForeignKeyConstraint(['cases_bench_id'], ['bench29.cases_bench.id'], ondelete='CASCADE'),
        ForeignKeyConstraint(['differential_diagnosis_id'], ['bench29.llm_differential_diagnosis.id'], ondelete='CASCADE'),
        ForeignKeyConstraint(
            ['differential_diagnosis_semantic_relationship_id'], 
            ['registry.diagnosis_semantic_relationship.id'], 
            ondelete='CASCADE'
        ),
        ForeignKeyConstraint(['case_severity'], ['registry.severity_levels.id'], ondelete='CASCADE'),
        ForeignKeyConstraint(['differential_diagnosis_severity'], ['registry.severity_levels.id'], ondelete='CASCADE'),
        {'schema': 'bench29'},
    )

    single_differential_diagnosis_id = Column(Integer, primary_key=True)
    cases_bench_id = Column(Integer, nullable=False)
    differential_diagnosis_id = Column(Integer, nullable=False)
    predicted_rank = Column(Integer)
    differential_diagnosis_semantic_relationship_id = Column(Integer, nullable=False)
    case_severity = Column(Integer, nullable=False)
    differential_diagnosis_severity = Column(Integer, nullable=False)


if __name__ == '__main__':
    # Import get_session only when needed
    from db.utils.db_utils import get_session
    
    # Create tables - now using the shared Base with merged metadata
    session = get_session(create_tables=True, schema="bench29", base=Base)
    session.close()
    print("Bench29 schema tables created successfully.")
