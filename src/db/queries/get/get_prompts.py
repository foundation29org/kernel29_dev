# -*- coding: utf-8 -*-
#
# Prompts Getter Functions Module

# This module provides standardized functions for retrieving data from tables
# within the 'prompts' schema (defined in db.prompts.prompts_models).
# Logic mirrors the structure in get_bench29.py.

# Author: Carlos Beridane [Generated by AI]
# License: (Inherited from project)

# Adjust the system path to include parent directories
import os
import sys
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../'))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../../'))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../../../'))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../../../../'))


from sqlalchemy.orm import Session
from datetime import datetime
from typing import List, Optional, Any, Dict, Union, Sequence # Added Sequence for vector type hint

# Import Prompts models
from db.prompts.prompts_models import (
    User, Prompt, RelationshipType, PromptRelationship,
    PromptArguments, PromptTemplate, PromptMetrics, PromptVector
)

# --- Specific Getter Functions ---

def get_user(
    session: Session,
    all_: bool = False,
    id_only: bool = False,
    id_: Optional[int] = None,
    name: Optional[str] = None,
) -> Optional[Union[User, List[User], int, List[int]]]:
    """
    Retrieves records from the users table.
    Args: [session, all_, id_only, id_, name]
    Returns: [List[int], List[User], int, None, List[User]]
    """
    query = session.query(User)

    if all_:
        if id_only:
            all_items = query.all()
            return [item.id for item in all_items] if all_items else []
        else:
            return query.all()
    else:
        filters = []
        if id_ is not None:
            filters.append(User.id == id_)
        if name is not None:
            filters.append(User.name == name)

        if filters:
            query = query.filter(*filters)

        if id_only:
            result = query.first()
            return result.id if result else None
        else:
            return query.all()


def get_prompt(
    session: Session,
    all_: bool = False,
    id_only: bool = False,
    id_: Optional[int] = None,
    alias: Optional[str] = None,
    content: Optional[str] = None,
    meta_data: Optional[Dict[str, Any]] = None,
    is_active: Optional[bool] = None,
    created_at: Optional[datetime] = None,
    created_by: Optional[int] = None,
) -> Optional[Union[Prompt, List[Prompt], int, List[int]]]:
    """
    Retrieves records from the prompt table.
    Args: [session, all_, id_only, id_, alias, content, meta_data, is_active, created_at, created_by]
    Returns: [List[int], List[Prompt], int, None, List[Prompt]]
    """
    query = session.query(Prompt)

    if all_:
        if id_only:
            all_items = query.all()
            return [item.id for item in all_items] if all_items else []
        else:
            return query.all()
    else:
        filters = []
        if id_ is not None:
            filters.append(Prompt.id == id_)
        if alias is not None:
            filters.append(Prompt.alias == alias)
        if content is not None:
            filters.append(Prompt.content == content)
        if meta_data is not None:
            filters.append(Prompt.meta_data == meta_data)
        if is_active is not None:
            filters.append(Prompt.is_active == is_active)
        if created_at is not None:
            filters.append(Prompt.created_at == created_at)
        if created_by is not None:
            filters.append(Prompt.created_by == created_by)

        if filters:
            query = query.filter(*filters)

        if id_only:
            result = query.first()
            return result.id if result else None
        else:
            return query.all()


def get_relationship_type(
    session: Session,
    all_: bool = False,
    id_only: bool = False,
    id_: Optional[int] = None,
    type_name: Optional[str] = None,
) -> Optional[Union[RelationshipType, List[RelationshipType], int, List[int]]]:
    """
    Retrieves records from the relationship_type table.
    Args: [session, all_, id_only, id_, type_name]
    Returns: [List[int], List[RelationshipType], int, None, List[RelationshipType]]
    """
    query = session.query(RelationshipType)

    if all_:
        if id_only:
            all_items = query.all()
            return [item.id for item in all_items] if all_items else []
        else:
            return query.all()
    else:
        filters = []
        if id_ is not None:
            filters.append(RelationshipType.id == id_)
        if type_name is not None:
            filters.append(RelationshipType.type_name == type_name)

        if filters:
            query = query.filter(*filters)

        if id_only:
            result = query.first()
            return result.id if result else None
        else:
            return query.all()


def get_prompt_relationship(
    session: Session,
    all_: bool = False,
    id_only: bool = False,
    id_: Optional[int] = None,
    from_prompt_id: Optional[int] = None,
    to_prompt_id: Optional[int] = None,
    relationship_type: Optional[str] = None,
) -> Optional[Union[PromptRelationship, List[PromptRelationship], int, List[int]]]:
    """
    Retrieves records from the prompt_relationship table.
    Args: [session, all_, id_only, id_, from_prompt_id, to_prompt_id, relationship_type]
    Returns: [List[int], List[PromptRelationship], int, None, List[PromptRelationship]]
    """
    query = session.query(PromptRelationship)

    if all_:
        if id_only:
            all_items = query.all()
            return [item.id for item in all_items] if all_items else []
        else:
            return query.all()
    else:
        filters = []
        if id_ is not None:
            filters.append(PromptRelationship.id == id_)
        if from_prompt_id is not None:
            filters.append(PromptRelationship.from_prompt_id == from_prompt_id)
        if to_prompt_id is not None:
            filters.append(PromptRelationship.to_prompt_id == to_prompt_id)
        if relationship_type is not None:
            filters.append(PromptRelationship.relationship_type == relationship_type)

        if filters:
            query = query.filter(*filters)

        if id_only:
            result = query.first()
            return result.id if result else None
        else:
            return query.all()


def get_prompt_arguments(
    session: Session,
    all_: bool = False,
    id_only: bool = False,
    id_: Optional[int] = None,
    prompt_id: Optional[int] = None,
    parameters: Optional[Dict[str, Any]] = None,
    meta_data: Optional[Dict[str, Any]] = None,
) -> Optional[Union[PromptArguments, List[PromptArguments], int, List[int]]]:
    """
    Retrieves records from the prompt_arguments table.
    Args: [session, all_, id_only, id_, prompt_id, parameters, meta_data]
    Returns: [List[int], List[PromptArguments], int, None, List[PromptArguments]]
    """
    query = session.query(PromptArguments)

    if all_:
        if id_only:
            all_items = query.all()
            return [item.id for item in all_items] if all_items else []
        else:
            return query.all()
    else:
        filters = []
        if id_ is not None:
            filters.append(PromptArguments.id == id_)
        if prompt_id is not None:
            filters.append(PromptArguments.prompt_id == prompt_id)
        if parameters is not None:
            filters.append(PromptArguments.parameters == parameters)
        if meta_data is not None:
            filters.append(PromptArguments.meta_data == meta_data)

        if filters:
            query = query.filter(*filters)

        if id_only:
            result = query.first()
            return result.id if result else None
        else:
            return query.all()


def get_prompt_template(
    session: Session,
    all_: bool = False,
    id_only: bool = False,
    id_: Optional[int] = None,
    prompt_id: Optional[int] = None,
    filled_parameters: Optional[Dict[str, Any]] = None,
    meta_data: Optional[Dict[str, Any]] = None,
) -> Optional[Union[PromptTemplate, List[PromptTemplate], int, List[int]]]:
    """
    Retrieves records from the prompt_template table.
    Args: [session, all_, id_only, id_, prompt_id, filled_parameters, meta_data]
    Returns: [List[int], List[PromptTemplate], int, None, List[PromptTemplate]]
    """
    query = session.query(PromptTemplate)

    if all_:
        if id_only:
            all_items = query.all()
            return [item.id for item in all_items] if all_items else []
        else:
            return query.all()
    else:
        filters = []
        if id_ is not None:
            filters.append(PromptTemplate.id == id_)
        if prompt_id is not None:
            filters.append(PromptTemplate.prompt_id == prompt_id)
        if filled_parameters is not None:
            filters.append(PromptTemplate.filled_parameters == filled_parameters)
        if meta_data is not None:
            filters.append(PromptTemplate.meta_data == meta_data)

        if filters:
            query = query.filter(*filters)

        if id_only:
            result = query.first()
            return result.id if result else None
        else:
            return query.all()


def get_prompt_metrics(
    session: Session,
    all_: bool = False,
    id_only: bool = False,
    id_: Optional[int] = None,
    prompt_id: Optional[int] = None,
    prompt_arguments_id: Optional[int] = None,
    prompt_template_id: Optional[int] = None,
    model_id: Optional[int] = None,
    metrics: Optional[Dict[str, Any]] = None,
    task: Optional[str] = None,
    created_at: Optional[datetime] = None,
) -> Optional[Union[PromptMetrics, List[PromptMetrics], int, List[int]]]:
    """
    Retrieves records from the prompt_metrics table.
    Args: [session, all_, id_only, id_, prompt_id, prompt_arguments_id, prompt_template_id, model_id, metrics, task, created_at]
    Returns: [List[int], List[PromptMetrics], int, None, List[PromptMetrics]]
    """
    query = session.query(PromptMetrics)

    if all_:
        if id_only:
            all_items = query.all()
            return [item.id for item in all_items] if all_items else []
        else:
            return query.all()
    else:
        filters = []
        if id_ is not None:
            filters.append(PromptMetrics.id == id_)
        if prompt_id is not None:
            filters.append(PromptMetrics.prompt_id == prompt_id)
        if prompt_arguments_id is not None:
            filters.append(PromptMetrics.prompt_arguments_id == prompt_arguments_id)
        if prompt_template_id is not None:
            filters.append(PromptMetrics.prompt_template_id == prompt_template_id)
        if model_id is not None:
            filters.append(PromptMetrics.model_id == model_id)
        if metrics is not None:
            filters.append(PromptMetrics.metrics == metrics)
        if task is not None:
            filters.append(PromptMetrics.task == task)
        if created_at is not None:
            filters.append(PromptMetrics.created_at == created_at)

        if filters:
            query = query.filter(*filters)

        if id_only:
            result = query.first()
            return result.id if result else None
        else:
            return query.all()


def get_prompt_vector(
    session: Session,
    all_: bool = False,
    id_only: bool = False,
    id_: Optional[int] = None,
    prompt_id: Optional[int] = None,
    # vector: Optional[Sequence[float]] = None, # Filtering by vector is complex and likely not needed
    created_at: Optional[datetime] = None,
) -> Optional[Union[PromptVector, List[PromptVector], int, List[int]]]:
    """
    Retrieves records from the prompt_vector table.
    Args: [session, all_, id_only, id_, prompt_id, created_at] (Vector filtering omitted)
    Returns: [List[int], List[PromptVector], int, None, List[PromptVector]]
    """
    query = session.query(PromptVector)

    if all_:
        if id_only:
            all_items = query.all()
            return [item.id for item in all_items] if all_items else []
        else:
            return query.all()
    else:
        filters = []
        if id_ is not None:
            filters.append(PromptVector.id == id_)
        if prompt_id is not None:
            filters.append(PromptVector.prompt_id == prompt_id)
        # if vector is not None: # Omitted
        #     filters.append(PromptVector.vector == vector)
        if created_at is not None:
            filters.append(PromptVector.created_at == created_at)

        if filters:
            query = query.filter(*filters)

        if id_only:
            result = query.first()
            return result.id if result else None
        else:
            return query.all() 