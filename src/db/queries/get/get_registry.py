# -*- coding: utf-8 -*-
#
# Registry Getter Functions Module

# This module provides standardized functions for retrieving data from tables
# within the 'registry' schema (defined in db.registry.registry_models).
# Logic mirrors the structure in get_bench29.py.

# Author: Carlos Beridane [Generated by AI]
# License: (Inherited from project)

# Adjust the system path to include parent directories
import os
import sys
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../'))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../../'))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../../../'))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../../../../'))


from sqlalchemy.orm import Session
from typing import List, Optional, Any, Dict, Union

# Import Registry models
from db.registry.registry_models import (
    SeverityLevels, ComplexityLevels, DiagnosisSemanticRelationship
)

# --- Specific Getter Functions ---

def get_severity_levels(
    session: Session,
    all_: bool = False,
    id_only: bool = False,
    id_: Optional[int] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
) -> Optional[Union[SeverityLevels, List[SeverityLevels], int, List[int]]]:
    """
    Retrieves records from the severity_levels table.

    Args:
        session: SQLAlchemy session object.
        all_: If True, returns all records, ignoring other filter arguments.
        id_only: If True, returns only the ID(s) instead of the full object(s).
        id_: Filter by the primary key 'id'.
        name: Filter by the 'name' column.
        description: Filter by the 'description' column.

    Returns:
        - List[int]: IDs if all_=True and id_only=True.
        - List[SeverityLevels]: All objects if all_=True and id_only=False.
        - int: ID of the first match if filters are applied and id_only=True.
        - None: If filters are applied, id_only=True, but no match found.
        - List[SeverityLevels]: Objects matching filters if filters are applied and id_only=False.
        - Empty list ([]) if no match found when id_only=False or when all_=True on an empty table.
    """
    query = session.query(SeverityLevels)

    if all_:
        if id_only:
            all_items = query.all()
            return [item.id for item in all_items] if all_items else []
        else:
            return query.all()
    else:
        filters = []
        if id_ is not None:
            filters.append(SeverityLevels.id == id_)
        if name is not None:
            filters.append(SeverityLevels.name == name)
        if description is not None:
            filters.append(SeverityLevels.description == description)

        if filters:
            query = query.filter(*filters)

        if id_only:
            result = query.first()
            return result.id if result else None
        else:
            return query.all()


def get_complexity_levels(
    session: Session,
    all_: bool = False,
    id_only: bool = False,
    id_: Optional[int] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
) -> Optional[Union[ComplexityLevels, List[ComplexityLevels], int, List[int]]]:
    """
    Retrieves records from the complexity_levels table.

    Args:
        session: SQLAlchemy session object.
        all_: If True, returns all records, ignoring other filter arguments.
        id_only: If True, returns only the ID(s) instead of the full object(s).
        id_: Filter by the primary key 'id'.
        name: Filter by the 'name' column.
        description: Filter by the 'description' column.

    Returns:
        - List[int]: IDs if all_=True and id_only=True.
        - List[ComplexityLevels]: All objects if all_=True and id_only=False.
        - int: ID of the first match if filters are applied and id_only=True.
        - None: If filters are applied, id_only=True, but no match found.
        - List[ComplexityLevels]: Objects matching filters if filters are applied and id_only=False.
        - Empty list ([]) if no match found when id_only=False or when all_=True on an empty table.
    """
    query = session.query(ComplexityLevels)

    if all_:
        if id_only:
            all_items = query.all()
            return [item.id for item in all_items] if all_items else []
        else:
            return query.all()
    else:
        filters = []
        if id_ is not None:
            filters.append(ComplexityLevels.id == id_)
        if name is not None:
            filters.append(ComplexityLevels.name == name)
        if description is not None:
            filters.append(ComplexityLevels.description == description)

        if filters:
            query = query.filter(*filters)

        if id_only:
            result = query.first()
            return result.id if result else None
        else:
            return query.all()


def get_diagnosis_semantic_relationship(
    session: Session,
    all_: bool = False,
    id_only: bool = False,
    id_: Optional[int] = None,
    semantic_relationship: Optional[str] = None,
    description: Optional[str] = None,
) -> Optional[Union[DiagnosisSemanticRelationship, List[DiagnosisSemanticRelationship], int, List[int]]]:
    """
    Retrieves records from the diagnosis_semantic_relationship table.

    Args:
        session: SQLAlchemy session object.
        all_: If True, returns all records, ignoring other filter arguments.
        id_only: If True, returns only the ID(s) instead of the full object(s).
        id_: Filter by the primary key 'id'.
        semantic_relationship: Filter by the 'semantic_relationship' column.
        description: Filter by the 'description' column.

    Returns:
        - List[int]: IDs if all_=True and id_only=True.
        - List[DiagnosisSemanticRelationship]: All objects if all_=True and id_only=False.
        - int: ID of the first match if filters are applied and id_only=True.
        - None: If filters are applied, id_only=True, but no match found.
        - List[DiagnosisSemanticRelationship]: Objects matching filters if filters are applied and id_only=False.
        - Empty list ([]) if no match found when id_only=False or when all_=True on an empty table.
    """
    query = session.query(DiagnosisSemanticRelationship)

    if all_:
        if id_only:
            all_items = query.all()
            return [item.id for item in all_items] if all_items else []
        else:
            return query.all()
    else:
        filters = []
        if id_ is not None:
            filters.append(DiagnosisSemanticRelationship.id == id_)
        if semantic_relationship is not None:
            filters.append(DiagnosisSemanticRelationship.semantic_relationship == semantic_relationship)
        if description is not None:
            filters.append(DiagnosisSemanticRelationship.description == description)

        if filters:
            query = query.filter(*filters)

        if id_only:
            result = query.first()
            return result.id if result else None
        else:
            return query.all() 