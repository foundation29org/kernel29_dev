# -*- coding: utf-8 -*-
#
# LLM Getter Functions Module

# This module provides standardized functions for retrieving data from tables
# within the 'llm' schema (defined in db.llm.llm_models).
# Logic mirrors the structure in get_bench29.py.

# Author: Carlos Beridane [Generated by AI]
# License: (Inherited from project)

# Adjust the system path to include parent directories
import os
import sys
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../'))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../../'))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../../../'))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../../../../'))


from sqlalchemy.orm import Session
from typing import List, Optional, Any, Dict, Union

# Import LLM models
from db.llm.llm_models import Models

# --- Specific Getter Functions ---

def get_models(
    session: Session,
    all_: bool = False,
    id_only: bool = False,
    id_: Optional[int] = None,
    alias: Optional[str] = None,
    name: Optional[str] = None,
    provider: Optional[str] = None,
) -> Optional[Union[Models, List[Models], int, List[int]]]:
    """
    Retrieves records from the models table.

    Args:
        session: SQLAlchemy session object.
        all_: If True, returns all records, ignoring other filter arguments.
        id_only: If True, returns only the ID(s) instead of the full object(s).
        id_: Filter by the primary key 'id'.
        alias: Filter by the 'alias' column.
        name: Filter by the 'name' column.
        provider: Filter by the 'provider' column.

    Returns:
        - List[int]: IDs if all_=True and id_only=True.
        - List[Models]: All objects if all_=True and id_only=False.
        - int: ID of the first match if filters are applied and id_only=True.
        - None: If filters are applied, id_only=True, but no match found.
        - List[Models]: Objects matching filters if filters are applied and id_only=False.
        - Empty list ([]) if no match found when id_only=False or when all_=True on an empty table.
    """
    query = session.query(Models)

    if all_:
        if id_only:
            all_items = query.all()
            return [item.id for item in all_items] if all_items else []
        else:
            return query.all()
    else:
        filters = []
        if id_ is not None:
            filters.append(Models.id == id_)
        if alias is not None:
            filters.append(Models.alias == alias)
        if name is not None:
            filters.append(Models.name == name)
        if provider is not None:
            filters.append(Models.provider == provider)

        if filters:
            query = query.filter(*filters)

        if id_only:
            result = query.first()
            return result.id if result else None
        else:
            return query.all() 