# -*- coding: utf-8 -*-
#
# Registry Post Functions Module

# This module provides standardized functions for inserting data into tables
# within the 'registry' schema (defined in db.registry.registry_models).
# Logic mirrors the structure in post_bench29.py.

# Author: Carlos Beridane [Generated by AI]
# License: (Inherited from project)

# Adjust the system path to include parent directories
import os
import sys
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../'))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../../'))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../../../'))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../../../../'))

import datetime
from sqlalchemy.orm import Session

# Import Registry models
from db.registry.registry_models import (
    SeverityLevels, ComplexityLevels, DiagnosisSemanticRelationship
)

# --- Specific Adder Functions ---

def add_severity_levels(
    session: Session,
    name: str,
    description: Optional[str] = None,
    check_exists: bool = True,
    verbose: bool = False
) -> Union[int, bool]:
    """
    Add a record to the SeverityLevels table.

    Args:
        session: SQLAlchemy session
        name: Severity level name (required, used for existence check)
        description: Optional description
        check_exists: Whether to check if the record already exists (default True)
        verbose: Whether to print debug information

    Returns:
        int or bool: ID of the new record if added successfully, False otherwise.
    """
    if check_exists:
        existing = session.query(SeverityLevels).filter_by(name=name).first()
        if existing:
            if verbose:
                print(f"    SeverityLevel record already exists for name '{name}', skipping")
            return False # Return False if exists

    data_dict = {
        'name': name,
        'description': description,
    }

    data_dict = {k: v for k, v in data_dict.items() if v is not None}

    new_record = SeverityLevels(**data_dict)

    try:
        session.add(new_record)
        session.commit()
        session.flush()
        if verbose:
            print(f"    Added SeverityLevel record for '{name}' (ID: {new_record.id})")
        return new_record.id
    except Exception as e:
        session.rollback()
        print(f"Error adding SeverityLevel record for '{name}': {e}")
        return False


def add_complexity_levels(
    session: Session,
    name: str,
    description: Optional[str] = None,
    check_exists: bool = True,
    verbose: bool = False
) -> Union[int, bool]:
    """
    Add a record to the ComplexityLevels table.

    Args:
        session: SQLAlchemy session
        name: Complexity level name (required, used for existence check)
        description: Optional description
        check_exists: Whether to check if the record already exists (default True)
        verbose: Whether to print debug information

    Returns:
        int or bool: ID of the new record if added successfully, False otherwise.
    """
    if check_exists:
        existing = session.query(ComplexityLevels).filter_by(name=name).first()
        if existing:
            if verbose:
                print(f"    ComplexityLevel record already exists for name '{name}', skipping")
            return False

    data_dict = {
        'name': name,
        'description': description,
    }

    data_dict = {k: v for k, v in data_dict.items() if v is not None}

    new_record = ComplexityLevels(**data_dict)

    try:
        session.add(new_record)
        session.commit()
        session.flush()
        if verbose:
            print(f"    Added ComplexityLevel record for '{name}' (ID: {new_record.id})")
        return new_record.id
    except Exception as e:
        session.rollback()
        print(f"Error adding ComplexityLevel record for '{name}': {e}")
        return False


def add_diagnosis_semantic_relationship(
    session: Session,
    semantic_relationship: str,
    description: Optional[str] = None,
    check_exists: bool = True,
    verbose: bool = False
) -> Union[int, bool]:
    """
    Add a record to the DiagnosisSemanticRelationship table.

    Args:
        session: SQLAlchemy session
        semantic_relationship: Relationship name (required, used for existence check)
        description: Optional description
        check_exists: Whether to check if the record already exists (default True)
        verbose: Whether to print debug information

    Returns:
        int or bool: ID of the new record if added successfully, False otherwise.
    """
    if check_exists:
        existing = session.query(DiagnosisSemanticRelationship).filter_by(
            semantic_relationship=semantic_relationship
        ).first()
        if existing:
            if verbose:
                print(f"    DiagnosisSemanticRelationship record already exists for '{semantic_relationship}', skipping")
            return False

    data_dict = {
        'semantic_relationship': semantic_relationship,
        'description': description,
    }

    data_dict = {k: v for k, v in data_dict.items() if v is not None}

    new_record = DiagnosisSemanticRelationship(**data_dict)

    try:
        session.add(new_record)
        session.commit()
        session.flush()
        if verbose:
            print(f"    Added DiagnosisSemanticRelationship record for '{semantic_relationship}' (ID: {new_record.id})")
        return new_record.id
    except Exception as e:
        session.rollback()
        print(f"Error adding DiagnosisSemanticRelationship record for '{semantic_relationship}': {e}")
        return False 