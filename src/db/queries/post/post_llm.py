# -*- coding: utf-8 -*-
#
# LLM Post Functions Module

# This module provides standardized functions for inserting data into tables
# within the 'llm' schema (defined in db.llm.llm_models).
# Logic mirrors the structure in post_bench29.py.

# Author: Carlos Beridane [Generated by AI]
# License: (Inherited from project)

# Adjust the system path to include parent directories
import os
import sys
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../'))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../../'))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../../../'))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../../../../'))

import datetime
from sqlalchemy.orm import Session
from typing import Optional, Union

# Import LLM models
from db.llm.llm_models import Models

# --- Specific Adder Functions ---

def add_models(
    session: Session,
    name: str,
    provider: str,
    alias: Optional[str] = None,
    check_exists: bool = True,
    verbose: bool = False
) -> Union[int, bool]:
    """
    Add a record to the Models table.

    Args:
        session: SQLAlchemy session
        name: Model name (required)
        provider: Model provider (required)
        alias: Optional model alias (used for existence check if provided)
        check_exists: Whether to check if the record already exists (default True)
        verbose: Whether to print debug information

    Returns:
        int or bool: ID of the new record if added successfully, False otherwise.
    """
    if check_exists:
        # Use alias for existence check if provided, otherwise maybe name+provider?
        # Sticking to alias check if provided, similar to source_file_path in bench29 example.
        # If alias is None, this check might not be effective for duplicates without alias.
        if alias is not None:
            existing = session.query(Models).filter_by(alias=alias).first()
            if existing:
                if verbose:
                    print(f"    Model record already exists for alias '{alias}', skipping")
                return False # Return False if exists
        # Potential enhancement: check by name and provider if alias is None?
        # else:
        #     existing = session.query(Models).filter_by(name=name, provider=provider).first()
        #     if existing:
        #         if verbose:
        #             print(f"    Model record already exists for name '{name}' and provider '{provider}', skipping")
        #         return False

    data_dict = {
        'name': name,
        'provider': provider,
        'alias': alias,
    }

    data_dict = {k: v for k, v in data_dict.items() if v is not None}

    new_record = Models(**data_dict)

    try:
        session.add(new_record)
        session.commit()
        session.flush()
        if verbose:
            print(f"    Added Model record '{name}' (Alias: {alias or 'N/A'}, ID: {new_record.id})")
        return new_record.id
    except Exception as e:
        session.rollback()
        print(f"Error adding Model record '{name}': {e}")
        return False 